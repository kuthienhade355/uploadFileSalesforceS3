<apex:page cache="false" showHeader="false" lightningStylesheets="true" controller="FullCalendarDemo" action="{!init}">
    <html ng-app="accounts">
        <apex:stylesheet value="{!URLFOR($Resource.SLDS274,'styles/salesforce-lightning-design-system.css')}" />
        <head>
            <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/lodash.js/0.10.0/lodash.min.js"></script>

            <script type="text/javascript" src="https://code.jquery.com/jquery-1.9.1.js"></script>
            <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.0/jquery-ui.min.js"></script>
            <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.14/themes/base/jquery-ui.css" type="text/css" media="all"/>
            <script src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.3/moment.min.js"/>
            <script src="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.9.0/fullcalendar.min.js"/>
            <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css" integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous"/>
            <link href="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.9.0/fullcalendar.min.css" rel="stylesheet" />
            <link href="//cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.9.0/fullcalendar.print.css" rel="stylesheet" media="print"  />
            <apex:includeScript value="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.6.1/angular.min.js"/>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/angular-filter/0.5.8/angular-filter.min.js"></script>
            <script>

                   
                const CalendarSingleton = (function(){
                let calendarInstance;
                function createCalendar(){
                      
                        const calendar = $('#calendar').fullCalendar({
                            
                            //Toolbar header
                            header: {
                                left:   'prev,next today',
                                center: 'title',
                                right: 'month,agendaWeek,agendaDay,listMonth'
                            },

                            eventLimit: true, 
                            views: {
                                month: { // name of view
                                  titleFormat: 'YYYY / MM /  DD'
                                  // other view-specific options here
                                },
                                agenda: {
                                  eventLimit: 6 
                                  // adjust to 6 only for agendaWeek/agendaDay
                                }
                              },
                            
                            //Changing text for different buttons
                            buttonText :{
                                today:    'Today',
                                month:    'Month',
                                week:     'Week',
                                day:      'Day',
                                list:     'List',
                                prevYear: 'Previous Year',
                                nextYear: 'Next Year',
                                prev: 'Previous',
                                next: 'Next'
                            },
                            //Toolbar footer with previous year and next year controls
                            footer: {
                                right: 'prevYear, nextYear'
                            },

                            themeSystem: 'jquery-ui',
                            aspectRatio: 2,
                            selectable:true,
                            weekNumbers: true, 

                            loading: function(bool) {
                              $('#loading').toggle(bool);
                            },

                            eventRender: function(event, el) {
                              // render the timezone offset below the event title
                              if (event.start.hasZone()) {
                                el.find('.fc-title').after(
                                  $('<div class="tzo"/>').text(event.start.format('Z'))
                                );
                              }
                            },
                            selectable:true,
                            timezone:"local",               
                            
                            //dayClick handler
                            select : function(start, end) {
                                console.log('1');
                                $("#dialog").css("display", "block");
                                handleSelect(start,end); 
                                console.log('2');   
                                $("#dialog").dialog();
                            },
                            
                            // Handle event click
                            eventClick : function(calendarEvent, browserEvent, view){
                                console.log('calendarEvent',calendarEvent);
                                console.log('view',view);
                                handleEventClick(calendarEvent, browserEvent, view);
                            },
                            
                            //Hanadle drag-drop of event
                            eventDrop: function(event, delta, revertFunc) {
                                //alert(event.title + " was dropped on " + event.start.format());
                                
                                if (!confirm("Are you sure about this change?")) {
                                    revertFunc();
                                } else{
                                   handleEventDrop(event); 
                                }
                            }
                        });
                        
                        return calendar;
                    }
                    

                    return {
                        getCalendar : function(){
                            if(!calendarInstance){
                                calendarInstance = createCalendar();
                            }
                            return calendarInstance;
                        },
                    }
                })();

                $.getJSON('https://fullcalendar.io/demo-timezones.json', function(timezones) {
                $.each(timezones, function(i, timezone) {
                  if (timezone != 'UTC') { // UTC is already in the list
                    $('#timezone-selector').append(
                      $("<option/>").text(timezone).attr('value', timezone)
                    );
                  }
                });
              });

              // when the timezone selector changes, dynamically change the calendar option
              $('#timezone-selector').on('change', function() {
                $('#calendar').fullCalendar('option', 'timezone', this.value || false);
              });

                const addEvents = function(eventsData){
                    const events = [];
                    eventsData.forEach(function(event){
                        const newEvent = {};
                        newEvent.Id = event.Event__c;
                        newEvent.title  = event.Event__r.Name__c;
                        // newEvent.start = new Date(event.Event__r.Start_Time__c+'T'+event.Event__r.Begin_Time__c);
                        newEvent.start = new Date(event.Event__r.Start_Time__c).toUTCString();
                        // newEvent.end = new Date(event.Event__r.End_Time__c+'T'+event.Event__r.Over_Time__c);
                        newEvent.end = new Date(addMinutes(event.Event__r.End_Time__c,1)).toUTCString();
                        newEvent.description = event.Event__r.Description__c;
                        newEvent.hours = event.Event__r.HourActive__c;
                        newEvent.hour = event.Event__r.Hour__c;
                        newEvent.editable  = true;
                        events.push(newEvent);
                    });
                    if(events.length > 0){
                        $('#calendar').fullCalendar('removeEventSources');
                        $('#calendar').fullCalendar('addEventSource', events);

                    }
                }

                const handleEventClick = function(calendarEvent, browserEvent, view){
                    console.log('calendarEvent',calendarEvent); 
                    calendarEvent.end = removeDate(calendarEvent.end);
                    var myStart = new Date(calendarEvent.start).toUTCString();
                    var myEnd = new Date(calendarEvent.end).toUTCString();
                    $('#updateEvent').css("display", "block");
                    $('#updateEventTitle').val(calendarEvent.title);
                    $('#updateStartTime').val(convert(myStart));
                    $('#updateEndTime').val(convert(myEnd));
                    $('#updateBeginTime').val(convertMin(myStart));
                    $('#updateOverTime').val(convertMin(myEnd));
                    $('#updateDescription').val(calendarEvent.description);
                    $('#updateHours').val(calendarEvent.hours);
                    $('#updateHour').val(calendarEvent.hour);
                    $('#recordId').val(calendarEvent.Id);
                    $('#updateEvent').dialog();
                }

                const handleSelect = function(start, end){
                    start = start.toDate();
                    end = removeMinutes(end.toDate(),1);
                    var myStart = new Date(start).toUTCString();
                    var myEnd = new Date(end).toUTCString();
                    $('#createEventTitle').val("");
                    $('#createStartTime').val(convert(myStart));
                    $('#createEndTime').val(convert(myEnd));
                    $('#createBeginTime').val(convertMin(myStart));
                    $('#createOverTime').val(convertMin(myEnd));
                    $('#createHours').val('00:00:00');
                    $('#createHour').val("");
                    $('#createDescription').val("");
                }

              
                const prepareEvent = function(title, startTime, endTime,beginTime,overTime,hours,hour,description,Id){                    
                    if(title.length>0 && startTime.length>0 && endTime.length>0 && hour.length>0){
                        console.log('1');
                        const calendarEvent = {};
                        calendarEvent.Id = Id;
                        calendarEvent.Name__c = title;
                        calendarEvent.Start_Time__c = new Date(startTime).getTime();
                        calendarEvent.End_Time__c = new Date(endTime).getTime();
                        // calendarEvent.Start_Time__c = new Date('2019-01-15T17:00:00Z').getTime();
                        // calendarEvent.End_Time__c = new Date('2019-01-16T17:00:00Z').getTime();
                        calendarEvent.Begin_Time__c = beginTime;
                        calendarEvent.Over_Time__c = overTime;
                        calendarEvent.HourActive__c = hours;
                        calendarEvent.Hour__c = hour;
                        calendarEvent.Description__c = description;
                        createOrUpdateEvents(JSON.stringify(calendarEvent),'{!count}');
                    }
                }   

                const handleEventDrop = function(event){
                    const calendarEvent = {};
                    calendarEvent.Id = event.Id;
                    calendarEvent.Name__c = event.title;
                    calendarEvent.Start_Time__c = new Date(event.start).getTime();
                    calendarEvent.End_Time__c = new Date(removeDate(event.end)).getTime();
                    // calendarEvent.Begin_Time__c = new Date(event.start).getTime();
                    // calendarEvent.Over_Time__c = new Date(event.end).getTime();
                    createOrUpdateEvents(JSON.stringify(calendarEvent),'{!count}');
                }

           
                const attachListners = function(){
               
                    $('#newEventForm').submit(function(event){
                        const title = $('#createEventTitle').val();
                        // const beginTime1 = $('#createBeginTime').val();
                        // const beginTime = 'T'+beginTime1+'Z';
                        const beginTime = 'T'+$('#createBeginTime').val()+'Z';
                        // const overTime1 = $('#createOverTime').val();
                        // const overTime = 'T'+overTime1+'Z';
                        const overTime = 'T'+$('#createOverTime').val()+'Z';
                        // const startTime1 = $('#createStartTime').val();
                        // const startTime = startTime1+beginTime;
                        const startTime = $('#createStartTime').val()+beginTime;
                        // const endTime1 = $('#createEndTime').val();
                        // const endTime = endTime1+overTime;
                        const description =$('#createDescription').val();
                        const hour =$('#createHour').val();
                        
                        const hours = $('#createHours').val();
                        if(hours == '00:00:00'){
                            const endTime = $('#createEndTime').val()+overTime;
                        }
                        const overTime1 = $('#createBeginTime').val();
                        const time = addTimes(overTime1,hours);
                        const endTime =  $('#createEndTime').val() +'T'+time+'Z';
                        if(new Date(startTime).getTime() > new Date(endTime).getTime()){
                            $("#createStartTime").after('<span id="intro" style="color:red"><br>End Date than Start Date</span>');
                        }else if(title.length===0){
                            $("#createEventTitle").after('<span id="intro" style="color:red"><br>Name empty!</span>');
                        }else if(hour.length===0){
                            $("#createHour").after('<span id="intro" style="color:red"><br>Hour empty!</span>');
                        }
                        else{
                            prepareEvent(title,startTime,endTime,beginTime,overTime,hours,hour,description);
                            $("#dialog").dialog( "close" );
                            event.preventDefault();
                        }

                        // if(new Date(startTime).getTime() > new Date(endTime).getTime()){
                        //     document.getElementById('requiredStartTime').style.display = 'block';
                        //     event.preventDefault();

                        // }else if(title.length===0){
                        //     document.getElementById('requiredProject').style.display = 'block';
                        //     event.preventDefault();

                        // }else if(hour.length===0){
                        //     document.getElementById('requiredHour').style.display = 'block';
                        //     event.preventDefault();
                        // }
                        // else{
                        //     prepareEvent(title,startTime,endTime,beginTime,overTime,hours,hour,description);
                        //     $("#dialog").dialog( "close" );
                        //     event.preventDefault();
                        // }


                    });
                    
                
                    $('#updateEventForm').submit(function(event){
                        const title = $('#updateEventTitle').val();
                        // const startTime = $('#updateStartTime').val();
                        // const endTime = $('#updateEndTime').val();
                        // const beginTime = $('#updateBeginTime').val();
                        // const overTime = $('#updateOverTime').val();
                        const beginTime = 'T'+$('#updateBeginTime').val()+'Z';
                        const overTime = 'T'+$('#updateOverTime').val()+'Z';
                        const startTime = $('#updateStartTime').val()+beginTime;
                        // const endTime = $('#updateEndTime').val()+overTime;
                        const Id = $('#recordId').val();
                        const description = $('#updateDescription').val();
                        const hours = $('#updateHours').val();
                        const hour = $('#updateHour').val();
                        if(hours == '00:00:00'){
                            const endTime = $('#updateEndTime').val()+overTime;
                        }
                        const overTime1 = $('#updateBeginTime').val();
                        const time = addTimes(overTime1,hours);
                        const endTime =  $('#updateEndTime').val() +'T'+time+'Z';
                        if(new Date(startTime).getTime() > new Date(endTime).getTime()){
                            $("#updateStartTime").after('<span id="intro" style="color:red"><br>End Date than Start Date </span>');
                        }else if(title.length===0){
                            $("#updateEventTitle").after('<span id="intro" style="color:red"><br>Project empty</span>');
                        }else if(hour.length===0){
                            $("#updateHour").after('<span id="intro" style="color:red"><br>Hour empty</span>');
                        }else{
                             prepareEvent(title, startTime, endTime,beginTime,overTime,hours,hour,description,Id);
                            $('#updateEvent').dialog( "close" );
                            event.preventDefault();
                        }
                    });

                     $('#target').click(function(event){
                        $("#intro").remove();
                        document.getElementById('updateEvent').style.display = 'none';
                        event.preventDefault();
                    })

                      $('#cancelUpdate').click(function(event){
                        $("#intro").remove();
                        document.getElementById('updateEvent').style.display = 'none';
                        event.preventDefault();
                    })

                    $('#target1').click(function(event){
                        $("#intro").remove();
                        document.getElementById('dialog').style.display = 'none';
                        event.preventDefault();
                    })

                    $('#cancelCreate').click(function(event){
                        $("#intro").remove();
                        document.getElementById('dialog').style.display = 'none';
                        event.preventDefault();
                    })

                }


            // angular
            var app = angular.module('accounts',['angular.filter']);

            app.factory('listContactFactory' , function($q, $rootScope){
                    const factory = {}; 
            factory.callRemoteActionWithParameter = function(remoteAction, numberId){
                    var deferred = $q.defer();  
                    Visualforce.remoting.Manager.invokeAction(remoteAction, numberId, function(result){  
                      $rootScope.$apply(function(){  
                        deferred.resolve(result);
                      });  
                    }, {escape: false});
                    return deferred.promise;  
                }
                return factory;
            });
            app.service('filteredListService', function () {

                this.searched = function (valLists, toSearch) {
                    return _.filter(valLists,

                    function (i) {
                        /* Search Text in all 3 fields */
                        return searchUtil(i, toSearch);
                    });
                };

                this.paged = function (valLists, pageSize) {
                    retVal = [];
                    for (var i = 0; i < valLists.length; i++) {
                        if (i % pageSize === 0) {
                            retVal[Math.floor(i / pageSize)] = [valLists[i]];
                        } else {
                            retVal[Math.floor(i / pageSize)].push(valLists[i]);
                        }
                    }
                    return retVal;
                };

            });

            var TableCtrl = app.controller('TableCtrl', function ($scope, $filter, filteredListService,listContactFactory) {
                $scope.columnName ="name1";
                $scope.columnDescription = 'description1';
                $scope.columnHour ="Hour1";
                $scope.columnStartTime = "StartTime1";
                $scope.columnEndTime = "EndTime1";
                $scope.pageSize = 4;
                $scope.allItems = {!Accounts};
                $scope.reverse = false;
                $scope.detailUser = 'true';
                $scope.resetAll = function () {
                    $scope.filteredList = $scope.allItems;
                    $scope.newEmpId = '';
                    $scope.newName = '';
                    $scope.newEmail = '';
                    $scope.searchText = '';
                    $scope.currentPage = 0;
                    $scope.Header = ['', '', ''];
                }

                $scope.click = function(number){
                    listContactFactory.callRemoteActionWithParameter('{!$RemoteAction.FullCalendarDemo.getAccount1s}',number).then(function(result){
                        $scope.allItems = result;
                        $scope.sort();
                    });
                };

                $scope.showDetail = function(){
                    $scope.click('{!count}');
                    if($scope.detailUser === 'true'){
                        $scope.detailUser = 'false';                        
                    }else{
                        $scope.detailUser = 'true';
                    }
                }

                $scope.add = function () {
                    $scope.allItems.push({
                        EmpId: $scope.newEmpId,
                        name: $scope.newName,
                        Email: $scope.newEmail
                    });
                    $scope.resetAll();
                }

                $scope.search = function () {
                  console.log('$scope.searchText',$scope.searchText);
                    $scope.filteredList = filteredListService.searched($scope.allItems, $scope.searchText);

                    if ($scope.searchText == '') {
                        $scope.filteredList = $scope.allItems;
                    }
                    $scope.pagination();
                }

                // Calculate Total Number of Pages based on Search Result
                $scope.pagination = function () {
                    $scope.ItemsByPage = filteredListService.paged($scope.filteredList, $scope.pageSize);
                };

                $scope.setPage = function () {
                    $scope.currentPage = this.n;
                };

                $scope.firstPage = function () {
                    $scope.currentPage = 0;
                };

                $scope.lastPage = function () {
                    $scope.currentPage = $scope.ItemsByPage.length - 1;
                };

                $scope.range = function(start,end){ 
                    var rse = [],i;
                    if(end){
                        end = start;
                        start = 0
                    }
                    if(!end){
                        end = start;
                        start = 0
                    }
                    for(i = start ; i<end;i++){
                        rse.push(i);
                    }
                    var paging = rse;
                    if(rse.length >6){
                        var currentPage = $scope.currentPage;
                        paging = rse.slice(0,1);
                        if(currentPage === 0){
                            // show 123 ...567
                            paging = paging.concat(rse.slice(1,3));
                            paging.push(-1);
                            paging = paging.concat(rse.slice(rse.length-3,rse.length));
                        }
                        else if(currentPage < 3){
                            //  show 1234 ...7
                            paging = paging.concat(rse.slice(1,4));
                            paging.push(-1);
                            paging = paging.concat(rse.slice(rse.length-1,rse.length));
                        }
                        else if(currentPage > rse.length-4){
                            // show 1...4567
                            paging.push(-1);
                            paging = paging.concat(rse.slice(rse.length-4,rse.length));
                        }else{
                            //1...234...7
                            paging.push(-1);
                            paging = paging.concat(rse.slice(currentPage - 1 ,currentPage+2));
                            paging.push(-2);
                            paging = paging.concat(rse.slice(rse.length-1,rse.length));
                        }
                    }
                    return paging;
                }

                $scope.sort = function (sortBy) {
                    $scope.resetAll();

                    $scope.columnToOrder = sortBy;

                    //$Filter - Standard Service
                    $scope.filteredList = $filter('orderBy')($scope.filteredList, $scope.columnToOrder, $scope.reverse);

                    if ($scope.reverse) iconName = 'glyphicon glyphicon-chevron-up';
                    else iconName = 'glyphicon glyphicon-chevron-down';

                    if (sortBy === 'EmpId') {
                        $scope.Header[0] = iconName;
                    } else if (sortBy === 'name') {
                        $scope.Header[1] = iconName;
                    } else {
                        $scope.Header[2] = iconName;
                    }

                    $scope.reverse = !$scope.reverse;

                    $scope.pagination();
                };

                $scope.sort('name');

            });

            function searchUtil(item, toSearch) {
                /* Search Text in all 3 fields */
                console.log("item",item);
                console.log("toSearch",toSearch); 
                return (item.Event__r.Name__c.toLowerCase().indexOf(toSearch.toLowerCase()) > -1 || item.Id == toSearch) ? true : false;
            }
            </script>
            <style type="text/css">
                button.ui-button.ui-widget.ui-state-default.ui-corner-all.ui-button-icon-only.ui-dialog-titlebar-close{
                    display: none;
                }
                .slds-modal_large .slds-modal__container, .slds-modal--large .slds-modal__container{
                    width: 60%;
                }
                .ui-resizable-handle.ui-resizable-se.ui-icon.ui-icon-gripsmall-diagonal-se {
                    display:none;
                }
                input.btn.showDetail {
                    margin: 15px 15px 0 15px;
                }
                .sortorder:after {
                content: '\25b2';  
                }
                .sortorder.reverse:after{
                content: '\25bc'; 
                } 
                .slds-button:hover {
                    background-color: rgba(21,137,238,.1);
                }
                .active{
                    background: #7e8be4;
                    color: red;
                }
                .wrapperDescription{

                }
                #top {
                  background: #eee;
                  border-bottom: 1px solid #ddd;
                  padding: 0 10px;
                  line-height: 40px;
                  font-size: 12px;
                }

                #loading {
                  display: none;
                }

                .tzo {
                  color: #000;
                }
            </style>
        </head>
        <body ng-controller="TableCtrl">

            <!-- header -->

            <div style="position:relative;height:100px">
              <div class="slds-builder-header_container">
                <header class="slds-builder-header">
                  <div class="slds-builder-header__item">
                    <div class="slds-builder-header__item-label slds-media slds-media_center">
                      <div class="slds-media__figure">
                        <span class="slds-icon_container slds-icon-utility-builder slds-current-color">
                          <svg class="slds-icon slds-icon_x-small" aria-hidden="true">
                            <i class="fas fa-calendar-alt"></i>
                          </svg>
                        </span>
                      </div>
                      <div class="slds-media__body">Calendar Tran Minh Quan</div>
                    </div>
                  </div>
                 <!--  <nav class="slds-builder-header__item slds-builder-header__nav">
                    <ul class="slds-builder-header__nav-list">
                      <li class="slds-builder-header__nav-item">
                        <a href="javascript:void(0);" class="slds-builder-header__item-action slds-media slds-media_center">
                          <span class="slds-media__figure">
                            <span class="slds-icon_container slds-icon-utility-settings slds-current-color">
                              <svg class="slds-icon slds-icon_x-small" aria-hidden="true">
                                <i class="fas fa-link"></i>
                              </svg>
                            </span>
                          </span>
                          <span class="slds-media__body">
                            <span class="slds-truncate" title="Link">Link</span>
                          </span>
                        </a>
                      </li>
                      <li class="slds-builder-header__nav-item">
                        <button class="slds-button slds-builder-header__item-action slds-media slds-media_center" aria-haspopup="true" title="Click to open menu">
                          <span class="slds-media__figure">
                            <span class="slds-icon_container slds-icon-utility-page slds-current-color">
                              <svg class="slds-icon slds-icon_x-small" aria-hidden="true">
                                <i class="fas fa-chevron-circle-down"></i>
                              </svg>
                            </span>
                          </span>
                          <span class="slds-media__body">
                            <span class="slds-truncate" title="Dropdown">Dropdown</span>
                            <span class="slds-icon_container slds-icon-utility-chevrondown slds-current-color slds-m-left_small">
                              <svg class="slds-icon slds-icon_x-small" aria-hidden="true">
                              </svg>
                            </span>
                          </span>
                        </button>
                      </li>
                    </ul>
                  </nav> -->
                  <div class="slds-builder-header__item">
<!--                     <h1 class="slds-builder-header__item-label"></h1>
 -->                  </div>
                
                  <div class="slds-builder-header__item slds-builder-header__utilities">
                    <div class="slds-builder-header__utilities-item">
                      <a href="javascript:void(0);" class="slds-builder-header__item-action slds-media slds-media_center"
                      ng-click="showDetail()">
                        <div class="slds-media__figure">
                          <span class="slds-icon_container slds-icon-utility-back slds-current-color">
                            <svg class="slds-icon slds-icon_x-small" aria-hidden="true">
                                <i class="fas fa-users-cog"></i>
                            </svg>
                          </span>
                        </div>
                        <div class="slds-media__body">Hello {!userName}</div>
                      </a>
                    </div>
                    <div class="slds-builder-header__utilities-item">
                      <a href="javascript:void(0);" class="slds-builder-header__item-action slds-media slds-media_center" onclick="formLogOut();">
                        <div class="slds-media__figure">
                          <span class="slds-icon_container slds-icon-utility-help slds-current-color">
                            <svg class="slds-icon slds-icon_x-small" aria-hidden="true">
                                <i class="fas fa-sign-out-alt"></i>
                            </svg>
                          </span>
                        </div>
                        <div class="slds-media__body">Logout</div>
                      </a>
                    </div>
                  </div>
                </header>
              </div>
            </div>

            <!-- popup detail user -->




            <!-- Body -->
            <div id='top'>

              <div style='float:left'>
                Timezone:
                <select id='timezone-selector'>
                  <option value=''>none</option>
                  <option value='local'>local</option>
                  <option value='UTC'>UTC</option>
                </select>
              </div>

              <div style='float:right'>
                <span id='loading'>loading...</span>

              </div>

              <div style='clear:both'></div>
            </div>

            <br/>

            <div style="width:100%">
              <div id='calendar'></div>
            </div>
            <div id='updateEvent' style="display:none">
            <section role="dialog" tabindex="-1" class="  slds-modal slds-fade-in-open slds-modal_large" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1">
            <div class="slds-modal__container">
              <header class="slds-modal__header">
                <button class="close slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" id="target">
                    <i class="far fa-window-close"></i>
                </button>
                <h2 class="slds-text-heading_medium slds-hyphenate">Update Calendar</h2>
              </header>
              <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                <!-- content -->
                    <form id="updateEventForm">
                            <table>
                                <tr>
                                    <td>Project</td><td><input type="text" id="updateEventTitle" style="margin:5px" required="true"/></td>
                                     <td>Start Day</td><td><input type="text" id="updateStartTime" style="margin:5px"/>
                                    </td>
                                    <td style="display:none;">Start Time</td><td><input type="text" id="updateBeginTime" style="display:none;margin:5px"/></td>
                                </tr>
                                <!-- <tr>
                                    <td>Start Day</td><td><input type="text" id="updateStartTime" style="margin:5px"/>
                                    </td>
                                    <td style="display:none;">Start Time</td><td><input type="text" id="updateBeginTime" style="display:none;margin:5px"/></td>
                                </tr>
                                <tr>
                                    <td>End Day</td><td><input type="text" id="updateEndTime" style="margin:5px"/></td>
                                    <td style="display:none">End Time</td><td><input type="text" id="updateOverTime" style="display:none;margin:5px"/></td>
                                </tr> -->
                                <tr>
                                    <td>Hour</td>
                                    <td><input type="number" id="updateHour" style="margin:5px" min="1" required="true"/></td>
                                    <td>End Day</td><td><input type="text" id="updateEndTime" style="margin:5px" required="true"/></td>
                                    <td style="display:none">End Time</td><td><input type="text" id="updateOverTime" style="display:none;margin:5px"/></td>
                                </tr>
                                <tr style="display:none">
                                    <td >Hours</td>
                                    <td><input type="text" id="updateHours" style="margin:5px"/></td>
                                </tr>
                                <tr>
                                    <td>Description</td>
                                    <td><textarea class="wrapperDescription" id="updateDescription" style="margin:5px;width: 130%;"/></td>
                                </tr>
                                <tr>
                                    <td><input type="hidden" id="recordId" name="recordId" /></td>
                                    <td><input class="slds-button slds-button_brand" type="submit" value="Save" style="margin:5px"/><input class="slds-button slds-button_brand" type="submit" value="Cancel" style="margin:5px" id="cancelUpdate"/></td>
                                </tr>
                            </table>
                        </form>                       
              </div>
            </div>
          </section>
           <div class="slds-backdrop slds-backdrop_open"></div>
        </div>
               <div id="dialog" style="display:none" >
          <section role="dialog" tabindex="-1" class="  slds-modal slds-fade-in-open slds-modal_large" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1">
            <div class="slds-modal__container">
              <header class="slds-modal__header">
                <button class="close slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" id="target1">
                    <i class="far fa-window-close"></i>
                </button>
                <h2 class="slds-text-heading_medium slds-hyphenate">Create Calendar</h2>
              </header>

              <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                <!-- content -->
                    <form id="newEventForm">
                    <div id="messageError"></div>
                    <table>
                        <tr>
                            <td>Project</td><td id="required"><input type="text" id="createEventTitle" style="margin:5px" required="true"/></td>
                            <span id="requiredProject" style="color:red;display: none"><br/>Project Empty</span>
                             <td>Start Day</td><td id="required"><input type="text" id="createStartTime" style="margin:5px" onselect="" required="true"/></td>
                             <span id="requiredStartDay" style="color:red;display: none"><br/>End Date than Start Date</span>
                            <td  style="display:none;">Start Time</td><td><input type="text" id="createBeginTime" style="display:none; margin:5px"/></td>
                        </tr>
                        <!-- <tr>
                            <td>Start Day</td><td><input type="text" id="createStartTime" style="margin:5px"/></td>
                            <td  style="display:none;">Start Time</td><td><input type="text" id="createBeginTime" style="display:none; margin:5px"/></td>
                        </tr> -->
                        <!-- <tr>
                            <td>End Day</td><td><input type="text" id="createEndTime" style="margin:5px"/></td>
                            <td  style="display:none;">End Time</td><td><input type="text" id="createOverTime" style="display:none;margin:5px"/></td>
                        </tr> -->
                        <tr>
                            <td >Hour</td>
                            <td id="required"><input type="number" id="createHour" style="margin:5px" min="1" required="true"/></td>
                            <span id="requiredHour" style="color:red;display: none"><br/>Hour empty</span>
                            <td id="required">End Day</td><td><input type="text" id="createEndTime" style="margin:5px"/></td>
                            <td  style="display:none;">End Time</td><td><input type="text" id="createOverTime" style="display:none;margin:5px"/></td>
                         </tr>
                        <tr style="display:none">
                            <td >Hours</td>
                            <td id="required"><input type="text" id="createHours" style="margin:5px"/></td>
                         </tr>
                        <tr>
                            <td>Description</td>
                            <td><textarea id="createDescription" style="margin:5px;width: 130%;"/></td>
                        </tr>
                        <tr>
                            <td></td><td><input class="slds-button slds-button_brand" type="submit" value="Save" style="margin:5px"/>
                                <input class="slds-button slds-button_brand" type="submit" value="Cancel" id="cancelCreate" style="margin:5px"/>
                            </td>
                        </tr>
                    </table>
                </form>                          
              </div>
            </div>
          </section>
           <div class="slds-backdrop slds-backdrop_open"></div>
        </div>


         <div id='detailUser' ng-show="detailUser === 'false'" class="ng-hide">
            <section role="dialog" tabindex="-1" class="  slds-modal slds-fade-in-open slds-modal_large" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1">
            <div class="slds-modal__container">
              <header class="slds-modal__header">
                <button class="close slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" ng-click="showDetail()">
                    <i class="far fa-window-close"></i>
                </button>
                <h2 class="slds-text-heading_medium slds-hyphenate">User Info</h2>
              </header>
              <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">

                  <!-- fuck -->
                    <div>
                        <div class="input-group">
                            <!-- <input class="form-control" ng-model="searchText" placeholder="Search" type="search" ng-change="search()" /> -->
                            <label>Project:</label>
                            <select ng-model="searchText" ng-change="search()"> 
                              <!-- <select>  -->
                                  <option ng-repeat="item in allItems | unique: 'Event__r.Name__c'" value="{{item.Event__r.Name__c}}">{{item.Event__r.Name__c}}</option>
                            </select>
                             <a class="slds-th__action slds-text-link_reset" ng-click="sort('name')" role="button" tabindex="-1" aria-hidden="true">Show All</a>
                        </div>
                        <table ria-multiselectable="true" class="slds-table slds-table_bordered slds-table_fixed-layout slds-table_resizable-cols" role="grid">
                            <thead>
                                <tr class="slds-line-height_reset">

                        <!-- select -->
                      <th aria-label="Name" aria-sort="none" class="slds-text-title_caps slds-is-resizable slds-is-sortable" scope="col" ng-show="columnName === 'name1'">
                        <a class="slds-th__action slds-text-link_reset" ng-click="sort('name')" role="button" tabindex="-1" aria-hidden="true">
                          <span  class="slds-assistive-text">Sort by: </span>
                          <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                            <span class="slds-truncate" title="Name">TicketNo</span>
                            <span class="sortorder" ng-show="sorting === 'name'" ng-class="{reverse: reverse}"></span>
                          </div>
                       </a>
                        <div class="slds-resizable">
                          <input aria-label="Name column width" class="slds-resizable__input slds-assistive-text" id="cell-resize-handle-8" max="1000" min="20" tabindex="-1" StartTime="range" />
                        </div>
                      </th>
                      <th aria-label="Description" aria-sort="none" class="slds-text-title_caps slds-is-resizable slds-is-sortable" scope="col" ng-show="columnDescription === 'description1'">
                        <a class="slds-th__action slds-text-link_reset" ng-click="sort('Description')" role="button" tabindex="-1">
                          <span ng-show="sorting === 'Description'"  class="slds-assistive-text">Sort by: </span>
                          <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                            <span class="slds-truncate" title="Description">Description</span>
                            <span class="sortorder" ng-show="sorting === 'Description'" ng-class="{reverse: reverse}"></span>
                          </div>
                        </a>
                        <div class="slds-resizable">
                          <input aria-label="Description column width" class="slds-resizable__input slds-assistive-text" id="cell-resize-handle-10" max="1000" min="20" tabindex="-1" StartTime="range" />
                        
                        </div>
                      </th>
                      <th aria-label="Hour" aria-sort="none" class="slds-text-title_caps slds-is-resizable slds-is-sortable" scope="col" ng-show="columnHour === 'Hour1'">
                        <a class="slds-th__action slds-text-link_reset" ng-click="sort('Hour')" role="button" tabindex="-1">
                          <span ng-show="sorting === 'Hour'"  class="slds-assistive-text">Sort by: </span>
                          <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                            <span class="slds-truncate" title="Hour">Hours</span>
                            <span class="sortorder" ng-show="sorting === 'Hour'" ng-class="{reverse: reverse}"></span>
                          </div>
                        </a>
                        <div class="slds-resizable">
                          <input aria-label="Hour column width" class="slds-resizable__input slds-assistive-text" id="cell-resize-handle-11" max="1000" min="20" tabindex="-1" StartTime="range" />
                        </div>
                      </th>
                      <th aria-label="StartTime" aria-sort="none" class="slds-text-title_caps slds-is-resizable slds-is-sortable" scope="col" ng-show="columnStartTime === 'StartTime1'">
                        <a class="slds-th__action slds-text-link_reset" ng-click="sort('StartTime')" role="button" tabindex="-1">
                          <span ng-show="sorting === 'StartTime'"  class="slds-assistive-text">Sort by: </span>
                          <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                            <span class="slds-truncate" title="StartTime">StartDate</span>
                            <span class="sortorder" ng-show="sorting === 'StartTime'" ng-class="{reverse: reverse}"></span>
                          </div>
                        </a>
                        <div class="slds-resizable">
                          <input aria-label="StartTime column width" class="slds-resizable__input slds-assistive-text" id="cell-resize-handle-12" max="1000" min="20" tabindex="-1" StartTime="range" />
                        
                        </div>
                      </th>
                      <th aria-label="EndTime" aria-sort="none" class="slds-text-title_caps slds-is-resizable slds-is-sortable" scope="col" ng-show="columnEndTime === 'EndTime1'">
                        <a class="slds-th__action slds-text-link_reset"  ng-click="sort('EndTime')" role="button" tabindex="-1">
                          <span ng-show="sorting === 'EndTime'"  class="slds-assistive-text">Sort by: </span>
                          <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                            <span class="slds-truncate" title="EndTime">EndDate</span>
                            <span class="sortorder" ng-show="sorting === 'EndTime'" ng-class="{reverse: reverse}"></span>
                          </div>
                        </a>
                        <div class="slds-resizable">
                          <input aria-label="EndTime column width" class="slds-resizable__input slds-assistive-text" id="cell-resize-handle-14" max="1000" min="20" tabindex="-1" StartTime="range" />
                        
                        </div>
                      </th>
                      <th aria-label="EndTime" aria-sort="none" class="slds-text-title_caps slds-is-resizable slds-is-sortable" scope="col" ng-show="columnEndTime === 'EndTime1'">
                        <a class="slds-th__action slds-text-link_reset"  role="button" tabindex="-1">
                          <!-- <span ng-show="sorting === 'EndTime'"  class="slds-assistive-text">Sort by: </span> -->
                          <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                            <span class="slds-truncate" title="EndTime">Create By</span>
                            <!-- <span class="sortorder" ng-show="sorting === 'EndTime'" ng-class="{reverse: reverse}"></span> -->
                          </div>
                        </a>
                        <div class="slds-resizable">
                          <input aria-label="EndTime column width" class="slds-resizable__input slds-assistive-text" id="cell-resize-handle-14" max="1000" min="20" tabindex="-1" StartTime="range" />
                        
                        </div>
                      </th>
                    </tr>
                            </thead>
                            <tbody>
                                <tr ng-repeat="item in ItemsByPage[currentPage] | orderBy:columnToOrder:reverse">
                                    <th scope="row" tabindex="0" style="display:none">
                        <div class="slds-truncate" title="Name">{{item.Event__r.Name__c}}
                        </div>
                      </th>
                      <th scope="row" tabindex="0">
                        <div class="slds-truncate" title="Name">{{item.Event__r.Name}}
                        </div>
                      </th>
                      <td role="gridcell">
                        <div class="slds-truncate" title="{{item.Event__r.Description__c}}">{{item.Event__r.Description__c}}</div>
                      </td>
                      <td role="gridcell">
                        <div class="slds-truncate" title="Hour">{{item.Event__r.Hour__c}}</div>
                      </td>
                      <td role="gridcell">
                        <div class="slds-truncate" title="StartTime">{{item.Event__r.Start_Time__c| date:'yyyy-MM-dd'}}</div>
                      </td>
                      <td role="gridcell">
                        <div class="slds-truncate" title="EndTime">{{item.Event__r.End_Time__c| date:'yyyy-MM-dd'}}</div>
                      </td>
                       <td role="gridcell">
                        <div class="slds-truncate" title="NameAccount">{{item.LoginUserCalendar__r.NameAccount__c}}</div>
                      </td>
                                </tr>
                            </tbody>
                        </table>
                        <div class="slds-grid slds-m-top_small slds-m-bottom_small">
                        <div class="slds-col slds-align_absolute-center">
                            <div ng-class="{'slds-hide': currentPage === 0}"><a href="#" ng-click="firstPage()">prev</a>

                            </div>
                            <div ng-repeat="n in range(ItemsByPage.length)">
                             &nbsp;&nbsp; <button href="#" ng-click="setPage()" ng-bind="n+1">1</button>
                              <span ng-show="n<0">...</span>
                            </div>
                            &nbsp;&nbsp;
                            <div ng-class="{'slds-hide': currentPage === ItemsByPage.length -1}"><a href="#" ng-click="lastPage()">next</a>

                            </div>
                        </div>
                        </div>
                    </div>
                    <!-- Ends Controller -->
                </div>


                <!-- fuck -->

              </div>
          </section>
           <div class="slds-backdrop slds-backdrop_open"></div>
        </div>
            <script>
               
                 $( document ).ready(function() {
                    var numberId = '{!count}';
                    
                    //Attach Listeners
                    attachListners();
                    getEvents(numberId);
                    // Initialize calendar
                    const calendar = CalendarSingleton.getCalendar();
                    // Get user's events
                    // getEvents(calendar);
                    $( "#createStartTime,#createEndTime,#updateStartTime,#updateEndTime" ).datepicker({ dateFormat: 'yy-mm-dd',onSelect:function(datesel){$("#intro").remove();} }).val();
                     });

                    
                    // window.onload = function(){
                    //   document.forms['member_signup'].submit();
                    // }
                //required

                function getEvents(numberId){
                    //Invoking remote action
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.FullCalendarDemo.getEvents}',
                        numberId,
                        function(result, event){
                            if (event.status) {
                                //Call was successful, add events to calendar    
                                addEvents(result, calendar);
                            } else if (event.type === 'exception') {
                                //Exception in remote call
                                console.error(`${event.message} ${event.where}`);
                                alert(event.message)
                            } else {
                                //Call was unsuccssful
                                console.error(`${event.message}`);
                                alert(event.message)
                            }
                        }, 
                        {escape: true}
                    );
                }
                
                function convert(str) {
                    var date = new Date(str);
                        console.log('date',date.toUTCString());
                        mnth = ("0" + (date.getUTCMonth()+1)).slice(-2);
                        console.log('mnth',mnth);
                        day  = ("0" + (date.getUTCDate())).slice(-2);
                        console.log('day',day);

                    return [ date.getFullYear(), mnth, day ].join("-");
                }

                function convertMin(str){
                    var date = new Date(str)
                    hours = ("0" + date.getUTCHours()).slice(-2);
                    minutes = ("0" + date.getUTCMinutes()).slice(-2);
                    seconds = ("0" + date.getUTCSeconds()).slice(-2);
                    return [hours, minutes, seconds].join(":");
                }

                function createOrUpdateEvents(calendarEvent,numberId){
                    //Invoking remote action
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.FullCalendarDemo.createOrUpdateEvents}',
                        calendarEvent,numberId,
                        function(result, event){
                            if (event.status) {
                                //Call was successful, add events to calendar    
                                addEvents(result, calendar);
                            } else if (event.type === 'exception') {
                                //Exception in remote call
                                console.error(`${event.message} ${event.where}`);
                            } else {
                                //Call was unsuccssful
                                console.error(`${event.message}`);
                            }
                        }, 
                        {escape: true}
                    );
                }
                
                const formLogOut = function(){
                    var delete_cookie = function(name) {
                        document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
                        };
                    delete_cookie('apex__urlId');
                    window.location = '/apex/login';
                }

                function removeMinutes(date, minutes) {
                    return new Date(date - minutes*60000);
                }

                function addMinutes(date, minutes) {
                    return new Date(date + minutes*60000 + 86400000);
                }

                function removeDate(date) {
                    return new Date(date - 86400000);
                }

                function addTimes (startTime, endTime) {
                      var times = [ 0, 0, 0 ]
                      var max = times.length
                      var a = (startTime || '').split(':')
                      var b = (endTime || '').split(':')

                      // normalize time values
                      for (var i = 0; i < max; i++) {
                        a[i] = isNaN(parseInt(a[i])) ? 0 : parseInt(a[i])
                        b[i] = isNaN(parseInt(b[i])) ? 0 : parseInt(b[i])
                      }

                      // store time values
                      for (var i = 0; i < max; i++) {
                        times[i] = a[i] + b[i]
                      }

                      var hours = times[0]
                      var minutes = times[1]
                      var seconds = times[2]

                      if (seconds >= 60) {
                        var m = (seconds / 60) << 0
                        minutes += m
                        seconds -= 60 * m
                      }

                      if (minutes >= 60) {
                        var h = (minutes / 60) << 0
                        hours += h
                        minutes -= 60 * h
                      }

                      return ('0' + hours).slice(-2) + ':' + ('0' + minutes).slice(-2) + ':' + ('0' + seconds).slice(-2)
                    }

                    $('#createEventTitle,#updateEventTitle,#createHour,#updateHour').on('input', function(){
                        $("#intro").remove();
                    });
                    // $('#createEventTitle').on('input', function(){
                    //     $("span").remove();
                    // });
                    // $('#updateEventTitle').on('input', function(){
                    //     $("#intro").remove();
                    // });
                    // $('#createHour').on('input', function(){
                    //     $("#intro").remove();
                    // });
                    // $('#updateHour').on('input', function(){
                    //     $("#intro").remove();
                    // });
                    // window.onload = function(){
                    //               document.forms['updateEventForm'].submit();
                    //             }
            </script>
        </body>
    </html>
</apex:page>